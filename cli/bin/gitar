#! /usr/bin/env bash
#
# @LICENSE  Apache-2.0
# @AUTHOR Hasnae R.
# @VERSION 1.0.0
#

source selfedit.sh

_pick_author() {
    while read data
    do
        filename=${data}
        annotation=$(git annotate -e ${filename} HEAD)
        if [[ ${annotation} =~ ^(.*)(<${pick_author}>)(.*)$ ]]; then
            echo ${pick_author} : ${filename}
        fi
    done
}

# @COMMAND pick [author]                        picks out files with changes from author
function pick() {
    _with_arguments 1 $@
    pick_author=${1}; shift

    git ls-tree --name-only -r HEAD \
        | _pick_author
}

######################################################

_tune_author() {
    while read data
    do
        if [[ ${data} =~ ^HEAD:(.*):(.*):$ ]]; then
            filename=${BASH_REMATCH[1]}
            linenumber=${BASH_REMATCH[2]}
            all_the_blames=$(git annotate -e -L ${linenumber},${linenumber} ${filename})
            if [[ "${all_the_blames}" =~ ^(.*)(<${tune_author}>)(.*)$ ]]; then
                echo "***"
                echo "${filename}"
                echo "${all_the_blames}"
            fi
        fi
    done
}

# @COMMAND tune [pattern]                       finds out files with the pattern from author
function tune() {
    _with_arguments 1 $@
    pattern="${1}"
    tune_author=$(_default $2 $(git config user.email))

    git grep --line-number "${pattern}" HEAD \
        | awk '{print $1}' \
        | _tune_author
}

######################################################

_filter_branches() {
    while read data
    do
      if [[ ${data} =~ ^(.*)(origin/(confluence_|confluence-project-|release/(.*)).*)$ ]]; then
        date_and_author=${BASH_REMATCH[1]}
        branch=${BASH_REMATCH[2]}
        echo -e "${date_and_author} \033[32m${branch}\033[0m"
      fi
    done
}

# @COMMAND scale                                shows all the release/rogue/candidate branches
function scale() {
  git branch -va --sort=-committerdate --format='%(committerdate:short) %(authorname) %(refname:short)' \
    | _filter_branches
}

######################################################

# @COMMAND chord <?count>                       shows most recent tags
function chord() {
  count=${1:-10}
  git tag --sort=-creatordate | head -n ${count}
}

# @COMMAND masters <?count>                     shows top contributors to the repo
function masters() {
  count=${1:-40}
  me=$(git config user.email)
  git log --format=format:'%an - %x1b[32m(%ae)%x1b[0m' \
    | sort | uniq -c | sort -r | head -n +${count} \
    | grep --color -E "[0-9]+.*${me}.*|$"
}

# @COMMAND log                                  pretty git log
function log() {
  git log \
        --graph \
        --full-history \
        --color \
        --date=iso \
        --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%x1b[35m%ad %x1b[0m%s %x1b[35m(%aE)""]]]]]]"
}

# @COMMAND show [prop] [version]                greps maven property for given version
function show() {
  _with_arguments 1 $@
  property=${1}
  if [[ -z ${2} ]]; then
    tag=HEAD
  else
    version=$(_replace ${2} "." "\.")
    tag=$(git tag | grep "${version}$")
  fi
  git grep "${property}" ${tag} pom.xml
}

# @COMMAND band [count?]                        displays authors of recent commits
function band() {
  count=$(_default $1 20)
  git log -${count} --format=format:'%an - %x1b[32m(%ae)%x1b[0m' | sort | uniq
}

# @COMMAND stats [author]                       displays stats per author
function stats() {
    _with_arguments 1 $@
    git log --shortstat --author="${1}" \
        | grep -E "fil(e|es) changed" \
        | awk '{files+=$1; inserted+=$4; deleted+=$6} END \
               {print "files changed: ", files, "\nlines inserted: ", inserted, "\nlines deleted: ", deleted }'
}

# @COMMAND contains [hash]                      displays remote release branches with given commit, warning it says nothing about reverts
function contains() {
  _with_arguments 1 $@
  hash=${1};
  shift;
  git branch -r --contains ${hash} --list 'origin/release/*'
}

# @COMMAND snaps [version?]                    displays SNAPSHOT version on target release branches
function snaps() {
  filter=${1:-*}
  git branch -r --list origin/release/${filter} \
    | grep -Eo 'origin/release/[0-9]+.[0-9]+' \
    | xargs -I R git grep SNAPSHOT R pom.xml
}

# @COMMAND heros [word?]                        displays the authors that use the given word in their commits
function heros() {
  _with_arguments 1 $@
  word=${1}
  me=$(git config user.email)
  git log --format=format:'%an %x1b[32m(%ae)%x1b[0m : %s' \
    | grep -i "${word}" \
    | awk -F ":"  '{ print $1 }' \
    | sort \
    | uniq -c \
    | sort -r \
    | grep --color -E "[0-9]+.*${me}.*|$"
}

_version_pattern() {
  _with_arguments 1 "$@"
  version=${1}
  if [[ ${version} =~ ^([0-9]+)(\.([0-9]+)(\.([0-9]+))?)?$ ]]; then
     major_version=${BASH_REMATCH[1]}
     minor_version=${BASH_REMATCH[3]}
     patch_version=${BASH_REMATCH[5]}
  else
    echo "invalid version: ${version}"
    exit 1
  fi
  echo "${major_version}\.${minor_version:-[0-9]*}\.${patch_version:-[0-9]*}$"
}

# @COMMAND diff [version] [property]            display version history of a property across releases
function diff() {
  _with_arguments 2 "$@"
  pattern=$(_version_pattern "${1}")
  property=${2}

  git tag --sort=version:refname \
    | grep -Z -e "${pattern}" \
    | xargs -I X git grep -E "<.*${property}.*[0-9]+" X pom.xml
}

BACK_STAGE=()

_back_stage() {
  while read -r -a data
  do
    local lib_version="${data[0]}"
    local product_version="${data[1]}"
    local found=""
    for version in "${BACK_STAGE[@]}"; do
      if [[ "${lib_version}" == "${version}" ]]; then
        found=${version}
      fi
    done

    if [ -z "${found}" ]; then
      echo "${product_version}: ${lib_version}"
      BACK_STAGE+=("${lib_version}")
    fi
  done
}

# @COMMAND stage [version] [property]
function stage() {
  _with_arguments 2 "$@"
  pattern=$(_version_pattern "${1}")
  property=${2}

  git tag --sort=version:refname \
    | grep -Z -e "${pattern}" \
    | xargs -I X git grep -E "<.*${property}.*[0-9]+" X pom.xml \
    | sed -E 's/.*([0-9]+.[0-9]+.[0-9]+).*([0-9]+.[0-9]+.[0-9]+).*/\2 \1/' \
    | _back_stage
}

eval "$@"

if [[ -z $1 ]]; then
    $0 -h
fi
