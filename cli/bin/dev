#!/usr/bin/env bash
#
# @LICENSE  Apache-2.0
# @AUTHOR   Hasnae R.
# @VERSION  1.0.0
#

source selfedit.sh

##############
# HOUSEKEEPING
##############

# @COMMAND addkey                           adds ssh key
addkey() {
    ssh-add -K ~/.ssh/id_rsa
}

# @COMMAND audit [size?]                    checks for folders larger than 500MB in the current directory
audit() {
    max=$(_default '500000')
    du -k * | awk "\$1 > $max" | sort -nr
}

# @COMMAND portid [port]                    displays process listening on target port
portid() {
    lsof -i :$1
}

# @COMMAND src                              changes directory to viqueen sources dir
src() {
  cd ${VIQUEEN_DEVBOX_HOME}/..
}

# @COMMAND lc [filepath]                    line count for given file
lc() {
  _with_arguments 1 $@
  filepath=${1}
  wc -l ${filepath} | awk '{ print $1 }'
}

# @COMMAND rc                               opens .devboxrc file for edit
rc() {
  vim ${VIQUEEN_DEVBOX_HOME}/cli/.devboxrc
  source ${VIQUEEN_DEVBOX_HOME}/cli/.devboxrc
}

# @COMMAND path                             shows what's in the path
path() {
  IFS=':' read -ra DATA <<< "${PATH}"
  for item in "${DATA[@]}"; do
    echo ${item}
  done
}

# @COMMAND list                             lists all devbox binaries
list() {
  ls -la ${VIQUEEN_DEVBOX_HOME}/cli/bin
}

#######
# VIM
#######

# @COMMAND vimr                             vim refresh
vimr () {
  vim +PluginInstall +qall
}

# @COMMAND vimrc                            vim config
vimrc() {
  vim ${VIQUEEN_DEVBOX_HOME}/.vimrc
}

#####
# GIT
#####

# @COMMAND gl                               pretty git log
gl (){
    git log --graph \
            --full-history \
            --color \
            --date=iso \
            --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%x1b[35m%ad %x1b[0m%s %x1b[35m(%aE)""]]]]]]"
}

# @COMMAND commit                           triggers a commit with jira issue prefix extracted from branch name
commit() {
  message=${@}
  branch_name=$(git rev-parse --abbrev-ref HEAD)
  prefix="noissue"
  if [[ ${branch_name} =~ ^(.*)/([A-Z]+-[0-9]+)-(.*)$ ]]; then
    prefix=${BASH_REMATCH[2]}
  fi
  git commit -m "[${prefix}] - ${message}"
}

# @COMMAND pull                             git pull from upstream
pull() {
    upstream=$(git branch | sed -n '/\* /s///p')
    git pull origin ${upstream}
}

# @COMMAND push                             git push to upstream
push() {
    upstream=$(git branch | sed -n '/\* /s///p')
    git push origin ${upstream} $@
}

# @COMMAND fetch                            git fetch and git pull from origin
fetch() {
    upstream=$(git branch | sed -n '/\* /s///p')
    git fetch && git pull origin ${upstream}
}

# @COMMAND recent                           recent git branches
recent() {
    git for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)' \
      | egrep -v "(^\*|master|release|future)"
}

# @COMMAND merged                           list merged branches
merged() {
  git branch --merged | egrep -v "(^\*|master|release|renovate|future)"
}

# @COMMAND branch                           displays current branch name
branch() {
  git rev-parse --abbrev-ref HEAD
}

# @COMMAND contains                         check remote release branches for commit
contains() {
  _with_arguments 1 $@
  hash=${1}; shift
  git branch -r --contains ${hash} --list 'origin/release/*'
}

# @COMMAND stash [name]                     stashes with a name
stash() {
  _with_arguments 1 $@
  name=${1}; shift
  git stash save ${name}
}

# @COMMAND apply [name]                     applies a stash by name
apply() {
  _with_arguments 1 $@
  name=${1}; shift
  reference=$(
    git stash list      \
      | grep ${name}    \
      | awk '{print substr($1, 1, length($1)-1)}'
    )
  git stash apply ${reference}
}

# @COMMAND checkout [version]               checkout version
checkout() {
    _with_arguments 1 $@
    version=$(_replace "${1}" "." "\.")
    tag=$(git tag | grep "${version}$")
    git checkout ${tag}~1
}

# @COMMAND milestone                        create a milestone branch from current issue branch
milestone() {
    branch_name=$(git rev-parse --abbrev-ref HEAD)
    if [[ ${branch_name} =~ ^milestone-(.*)$ ]]; then
        echo "already a milestone branch"
    elif [[ ${branch_name} =~ ^(.*)/([A-Z]+-[0-9]+)-(.*)$ ]]; then
        milestone_branch="milestone-${branch_name}"
        exits=$(git rev-parse --verify ${milestone_branch})
        if [[ -n ${exits} ]]; then
            git checkout ${milestone_branch}
        else
            git checkout -b ${milestone_branch}
        fi
    else
        echo "not an issue branch"
    fi
}

# @COMMAND issue                            switch back to issue branch from current milestone branch
issue() {
    branch_name=$(git rev-parse --abbrev-ref HEAD)
    if [[ ${branch_name} =~ ^milestone-(.*)$ ]]; then
        issue_branch=${BASH_REMATCH[1]}
        git checkout ${issue_branch}
    else
        echo "not a milestone branch"
    fi
}

# @COMMAND start                            start a development branch
start() {
  _with_arguments 2 $@
  ticket=${1}
  shift;
  slug=$(_join "\055" $@)
  git checkout -b "issue/${ticket}-${slug}"
}

#######
# MAVEN
#######

# @COMMAND build                            runs threaded maven build with skipping tests
build() {
    pom_file=$(pwd)/pom.xml
    gradle_file=$(pwd)/build.gradle

    if [[ -f "${pom_file}" ]]; then
        mvn -e -T 0.75C clean install -DskipTests=true -DskipITs=true $@
    elif [[ -f "${gradle_file}" ]]; then
        ./gradlew build
    fi
}

# @COMMAND compile                          runs threaded maven compile
compile() {
  mvn -e -T 0.75C compile -DskipTests $@
}

# @COMMAND package                          runs threaded maven package
package() {
  mvn -e -T 0.75C package -DskipTests=true -DskipITs=true $@
}

# @COMMAND verify                           runs maven verify and skips tests
verify() {
  mvn -e -T 0.75C verify -DskipTests $@
}

# @COMMAND setver                           interactively updates the maven version of a project
setver() {
    if [[ -z ${1} ]]; then
      mvn release:update-versions -DautoVersionSubmodules=true -DgenerateBackupPoms=false $@
    else
      version=${1}
      shift
      mvn versions:set -DnewVersion=${version} -DgenerateBackupPoms=false $@
    fi
}

# @COMMAND upver                            updates parent pom version to more recent value
upver() {
  mvn versions:update-parent -DgenerateBackupPoms=false $@
}

# @COMMAND ver                              display maven project version
ver() {
    pom_file=$(pwd)/pom.xml
    gradle_file=$(pwd)/build.gradle
    if [[ -f "${pom_file}" ]]; then
        getprop 'project.version'
    elif [[ -f "${gradle_file}" ]]; then
        ./gradlew properties --console=plain -q | grep "^version:" | awk '{printf $2; printf "\n"}'
    fi
}

# @COMMAND release                          runs a maven release
release() {
    mvn -B -DskipTests -Darguments=-DskipTests release:clean release:prepare release:perform $@
}

# @COMMAND updeps                           display dependency updates
updeps() {
    mvn versions:display-dependency-updates
}

# @COMMAND setprop                          sets a maven property value
setprop() {
  _with_arguments 2 $@
  property_name=${1}
  shift
  property_value=${1}
  shift
  mvn versions:set-property -Dproperty=${property_name} -DnewVersion=${property_value} -DgenerateBackupPoms=false $@
}

# @COMMAND getprop                          gets a maven property value
getprop() {
  _with_arguments 1 $@
  property_name=${1}
  shift
  execArgs=$(printf '${%s}' ${property_name})
  mvn -q -Dexec.executable=echo -Dexec.args="'${execArgs}'" --non-recursive org.codehaus.mojo:exec-maven-plugin:1.6.0:exec $@
}

# @COMMAND coords                           displays maven coordinates for project
coords() {
  mvn -q -Dexec.executable=echo \
         -Dexec.args='${project.groupId}:${project.artifactId}:${project.version}' \
         --non-recursive \
         org.codehaus.mojo:exec-maven-plugin:1.6.0:exec \
         $@
}

###############
# NODE / NPM
##############

# @COMMAND npmg                             list global npm packages
npmg() {
  npm list -g --depth 0
}

eval $@

if [[ -z $1 ]];
then
    cd ${VIQUEEN_DEVBOX_HOME}
fi
