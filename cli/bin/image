#! /usr/bin/env bash
# @VERSION 1.0.0
# @AUTHOR Hasnae R.
# @LICENSE Apache-2.0

source selfedit.sh

DOCKER_IMAGES_HOME=${VIQUEEN_DEVBOX_HOME}/docker-images
DOCKER_HUB_NAMESPACE=${NAMESPACE:-viqueen}

_image() {
    _with_arguments 2 "$@"
    name=${1}
    version=${2}
    if [[ ${DOCKER_HUB_NAMESPACE} == "/" ]]; then
      namespace=""
    else
      namespace=${DOCKER_HUB_NAMESPACE}/
    fi
    echo "${namespace}${name}:${version}"
}

# @COMMAND build [name] [tag]       builds a docker image in viqueen namespace
function build() {
    image=$(_image "$@")
    name=${1}
    baseVersion=${2}
    target=${DOCKER_IMAGES_HOME}/${name}/

    if [[ -f "${target}/jdk.Dockerfile" ]]; then
        sed "s/\${JDK_VERSION}/${baseVersion}/g" "${target}"/jdk.Dockerfile > "${target}"/Dockerfile
    fi
    if [[ -f "${target}/ubuntu.Dockerfile" ]]; then
        sed "s/\${UBUNTU_VERSION}/${baseVersion}/g" "${target}"/ubuntu.Dockerfile > "${target}"/Dockerfile
    fi
    if [[ -f "${target}/node.Dockerfile" ]]; then
      sed "s/\${NODE_VERSION}/${baseVersion}/g" "${target}"/node.Dockerfile > "${target}"/Dockerfile
    fi

    shift
    shift

    docker build -t "${image}" "${target}"/ "$@"
}

# @COMMAND push [name] [tag]        pushes a docker image to viqueen namespace on docker hub
function push() {
    image=$(_image "$@")
    shift
    shift
    docker push "${image}" "$@"
}

_run_cmd() {
    _with_arguments 2 "$@"
    image=$(_image "${1}" "${2}")
    shift
    shift
    if [[ -n ${1} ]]; then
      options="--name ${1}"
      shift
    fi
    # shellcheck disable=SC2145
    echo "docker run ${options} $@ -it --entrypoint=/bin/bash ${image}"
}

# @COMMAND run [name] [tag]         runs a docker image from viqueen namespace
function run() {
    # shellcheck disable=SC2046
    eval $(_run_cmd "$@")
}

_mount_cmd() {
    _with_arguments 2 "$@"
    directory=$(pwd)
    volume_name=$(basename "${directory}")
    image=$(_image "${1}" "${2}")
    shift
    shift
    options="--name ${volume_name} --volume ${directory}:/sources/${volume_name}"
    # shellcheck disable=SC2145
    echo "docker run ${options} -it --entrypoint=/bin/bash -w=/sources/${volume_name} $@ ${image}"
}

# @COMMAND mount [name] [tag]         mounts current working directory as volume onto image
function mount() {
    # shellcheck disable=SC2046
    eval $(_mount_cmd "$@")
}

# @COMMAND dismount                   cleans up current working directory as volume
function dismount() {
  directory=$(pwd)
  volume_name=$(basename "${directory}")
  docker rm "${volume_name}"
}

_start_cmd() {
    _with_arguments 1 "$@"
    container=${1}
    echo "docker start -i ${container}"
}

# @COMMAND start <container>           starts existing docker container
function start() {
  # shellcheck disable=SC2046
  eval $(_start_cmd "$@")
}

# @COMMAND session <container>            opens terminal session on docker container
function session() {
  _with_arguments 1 "$@"
  docker exec -it "${1}" bash
}

# @COMMAND cmd [action] [version]                   displays resolved command
function cmd() {
    _with_arguments 1 "$@"
    action=${1}; shift

    case ${action} in
        "start")
            _start_cmd "$@"
            ;;
        "mount")
            _mount_cmd "$@"
            ;;
        "run")
            _run_cmd "$@"
            ;;
        *)
            echo "unknown command : [ start , debug ] allowed"
            ;;
    esac
}


# @COMMAND delc                   deletes all containers
function delc() {
  docker ps -a | tail -n +2 | awk '{ print $1 }' | xargs docker rm
}

# @COMMAND deli                   deletes all images
function deli() {
  docker images | tail -n +2 | awk '{ print $3 }' | xargs docker rmi
}

# @COMMAND stop                     stops all containers
function stop() {
    docker ps -a | tail -n +2 | awk '{ print $1 }' | xargs docker stop
}

# @COMMAND list
function list() {
    ls -lrt "${DOCKER_IMAGES_HOME}"
}

# shellcheck disable=SC2068
eval $@

if [[ -z $1 ]]; then
    $0 -h
fi
